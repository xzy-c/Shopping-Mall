<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
          version="3.1"
          metadata-complete="false">
  <display-name>Archetype Created Web Application</display-name>


  <!--spring的监听器  当在Tomcat中运行的时候，Tomcat会加载web.xml，
  在加载web.xml的时候，ContextLoaderListener监听器被触发
  该监听器会加载ApplicationContext配置文件-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:/ApplicationContext.xml</param-value>
  </context-param>


  <!--配置前端控制器，实质就相当于一个请求转发器servlet-->
  <servlet>
    <servlet-name>app</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:/app-servlet.xml</param-value>
    </init-param>
    <!--load-on-startup标记在web程序启动的时候是否加载这个servlet，就是是否实例化并且调用init方法
     他的值是一个整数，代表的swehjoi是servlet的加载顺序
     正数就代表在启动web程序的时候就加载这个servlet 值越小加载的时间越早  负数表示的是请求的时候再加载-->
    <load-on-startup>1</load-on-startup>

  </servlet>

  <session-config>
    <!--以分为单位-->
    <session-timeout>1</session-timeout>
  </session-config>


  <servlet-mapping>
    <servlet-name>app</servlet-name>
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>

  <!--乱码过滤器-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>




  <!--用户登录过滤器配置 开始 -->
  <filter>
    <filter-name>sessionFilter</filter-name>
    <filter-class>com.xzy.untis.SessionFilter</filter-class>
    <init-param>
      <description>将当前登录的用户的信息保存在 session 中时使用的key，如果没有配置此参数，则该过滤器不起作用</description>
      <param-name>sessionKey</param-name>
      <param-value>userInfo</param-value>
    </init-param>
    <init-param>
      <!--内容标签解释-->
      <description>
        如果用户未登录（即在 session 中 key 为 sessionKey 的属性不存在或为空），则将请求重定向到该 url。
        该 url 不包含web应用的 ContextPath。
        如果不配置此参数，则在用户未登录系统的情况下，直接重定向到web应用的根路径（/）
      </description>
      <param-name>redirectUrl</param-name>
      <param-value>/login.jsp</param-value>
    </init-param>
    <init-param>
      <description>
        不需要进行拦截的 url 的正则表达式，即：如果当前请求的 url 的 servletPath 能匹配该正则表达式，则直接放行（即使未登录系统）。
        此参数的值一般为 loginServlet 和 registServlet 等。
        另外，参数 redirectUrl 的值不用包含在该正则表达式中，因为 redirectUrl 对应的 url 会被自动放行。
        还有一点需要说明的是，该参数的值不包含web应用的 ContextPath。
      </description>
      <param-name>excepUrlRegex</param-name>
      <!-- 不拦截 /servlets/loginServlet 和 /servlets/registServlet -->
      <param-value>/servlets/(login|regist)Servlet</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>sessionFilter</filter-name>
    <url-pattern>/servlets/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>sessionFilter</filter-name>
    <url-pattern>/jsp/*</url-pattern>
  </filter-mapping>
  <!--用户登录过滤器配置 结束 -->

</web-app>
